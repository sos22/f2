#ifndef SPARK_TMPL__
#define SPARK_TMPL__

#include "fields.H"
#include "spark.H"
#include "thread.H"

template <typename t>
spark<t>::spark(std::function<t ()> _what)
    : wb(),
      thr(NULL),
      what(_what),
      pub(wb.pub) {
    thread::spawn(this, &thr, fields::mk("spark"))
        .fatal(fields::mk("spawning spark")); }

template <typename t> void
spark<t>::run(clientio) {
    wb.set(what()); }

template <typename t>
spark<t>::~spark() {
    /* We rely here on the fact that sparks are required to be very
       quick functions (and do not receive a clientio token), so
       joining them should also be very quick. */
    thr->join(clientio::CLIENTIO); }

#endif /* !SPARK_TMPL__ */
