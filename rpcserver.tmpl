#ifndef RPCSERVER_TMPL__
#define RPCSERVER_TMPL__

#include <sys/poll.h>
#include <string.h>

#include "fields.H"
#include "logging.H"
#include "peername.H"
#include "rpcconn.H"
#include "util.H"
#include "waitbox.H"
#include "waitqueue.H"

#include "list.tmpl"
#include "waitqueue.tmpl"

template <typename cookie_t>
rpcregistration<cookie_t>::rpcregistration(
    rpcserver<cookie_t> *_owner)
    : mux(),
      idle(mux),
      owner(_owner),
      content(),
      outstanding(0) {}

template <typename cookie_t> void
rpcregistration<cookie_t>::start()
{
    auto token(mux.lock());
    outstanding++;
    mux.unlock(&token);
}

template <typename cookie_t> void
rpcregistration<cookie_t>::finished()
{
    auto token(mux.lock());
    assert(outstanding > 0);
    outstanding--;
    if (outstanding == 0)
        idle.broadcast(token);
    mux.unlock(&token);
}

template <typename cookie_t> void
rpcregistration<cookie_t>::destroy() {
    /* Stop further invocations */
    owner->deregister(this);
    /* Wait for extant invocations to finish */
    auto token(mux.lock());
    while (outstanding != 0)
        token = idle.wait(&token);
    mux.unlock(&token);
    /* We're done. */
    content.flush();
    delete this; }

template <typename cookie_t>
rpcinterface<cookie_t>::rpcinterface(
    wireproto::msgtag _tag)
    : tag(_tag) {}

template <typename cookie_t>
class rpcconnthread : threadfn {
    friend class rpcserver<cookie_t>;
private: thread *thr_;
private: rpcserver<cookie_t> *owner;
private: cookie_t ctxt;
private: rpcconn conn;
private: waitbox<bool> &shutdownall;
private: waitbox<bool> shutdownone;
private: void run();
private: rpcconnthread(
    rpcserver<cookie_t> *_owner,
    socket_t _fd,
    waitbox<bool> &_shutdown)
    : thr_(NULL),
      owner(_owner),
      ctxt(),
      conn(_fd),
      shutdownall(_shutdown),
      shutdownone() {}
private: bool runcommand(bool *die);
public:  thread *thr() const;
public:  static orerror<rpcconnthread<cookie_t> *> spawn(
    rpcserver<cookie_t> *owner,
    socket_t fd,
    waitbox<bool> &);
};

template <typename cookie_t> bool
rpcconnthread<cookie_t>::runcommand(
    bool *die) {
    auto r(wireproto::rx_message::fetch(conn.incoming));
    if (r.isfailure()) {
        *die = r.failure() != error::underflowed;
        return false; }
    assert(r.success() != NULL);
    auto tag(r.success()->t);
    logmsg(loglevel::verbose, "run command " + fields::mk(tag));
    
    auto token(owner->mux.lock());
    auto reg(owner->unknownregistration);
    rpcinterface<cookie_t> *iface(&owner->unknowninterface);
    for (auto it(owner->registrations.start());
         !it.finished();
         it.next()) {
        for (auto it2((*it)->content.start());
             !it2.finished();
             it2.next()) {
            if ((*it2)->tag == tag) {
                reg = *it;
                iface = *it2;
                break; } } }
    reg->start();
    owner->mux.unlock(&token);
    
    auto res(iface->message(*r.success(), ctxt, conn.outgoing));
    
    reg->finished();

    if (res.isjust()) {
        wireproto::err_resp_message(*r.success(), res.just())
            .serialise(conn.outgoing); }
    r.success()->finish();
    return true; }

template <typename cookie_t> void
rpcconnthread<cookie_t>::run() {
    peername peer(conn.peer());
    
    bool die;
    die = false;
    
    subscriber sub;
    subscription shutdownallsub(sub, shutdownall.pub);
    subscription shutdownonesub(sub, shutdownone.pub);
    iosubscription insub(sub, conn.fd.poll(POLLIN));
    iosubscription outsub(sub, conn.fd.poll(POLLOUT));
    while (!die) {
        fields::flush();
        auto r(sub.wait());
        if (r == &shutdownallsub) {
            if (shutdownall.ready()) die = true;
        } else if (r == &shutdownonesub) {
            if (shutdownone.ready()) die = true;
        } else if (r == &insub) {
            auto t(conn.incoming.receive(conn.fd));
            insub.rearm();
            if (t.isjust()) {
                t.just().warn("receiving from client " + fields::mk(peer));
                break; }
            while (runcommand(&die))
                ;
        } else if (r == &outsub) {
            if (conn.outgoing.empty()) {
                /* Happens on initial iteration.  Just ignore it. */
            } else {
                auto rr(conn.outgoing.send(conn.fd));
                if (rr.isjust()) {
                    rr.just().warn("sending to client " + fields::mk(peer));
                    break; } }
        } else {
            abort(); }
        if (!conn.outgoing.empty()) outsub.rearm(); }
    
    logmsg(loglevel::info, fields::mk("client thread finishing"));
    owner->dying.pushtail(this); }

template <typename cookie_t> thread *
rpcconnthread<cookie_t>::thr() const {
    return thr_; }

template <typename cookie_t>
orerror<rpcconnthread<cookie_t> *>
rpcconnthread<cookie_t>::spawn(
    rpcserver<cookie_t> *owner,
    socket_t fd,
    waitbox<bool> &localshutdown) {
    auto res(new rpcconnthread(owner, fd, localshutdown));
    auto ctxt(owner->startconn(res->conn));
    if (ctxt.isfailure()) {
        logmsg(loglevel::failure,
               "connection from " + fields::mk(res->conn.peer()) +
               " rejected by implementation: " + fields::mk(ctxt.failure()));
        delete res;
        return ctxt.failure();
    }
    res->ctxt = ctxt.success();
    
    auto t(thread::spawn(res, &res->thr_,
                         "RPC client thread for " + fields::mk(fd.peer())));
    if (t.isjust()) {
        delete res;
        return t.just();
    } else {
        return res; } }

template <typename cookie_t> void
rpcserver<cookie_t>::rootthread::run() {
    subscriber sub;
    iosubscription socksub(sub, owner->sock.poll());
    subscription dyingsub(sub, owner->dying.pub);
    subscription shutdownsub(sub, owner->shutdown.pub);
    while (!owner->shutdown.ready() || !threads.empty()) {
        auto r(sub.wait());
        if (r == &shutdownsub) {
            if (!owner->shutdown.ready()) continue;
            logmsg(loglevel::info,
                   fields::mk("control interface received local shutdown"));
        } else if (r == &dyingsub) {
            if (owner->dying.empty()) continue;
            auto thr(owner->dying.pophead());
            logmsg(loglevel::info,
                   "control interface reaping client thread" +
                   fields::mk(*thr->thr()));
            thr->thr()->join();
            auto token(threadsmux.lock());
            for (auto it(threads.start()); 1; it.next()) {
                assert(!it.finished());
                if (*it == thr) {
                    it.remove();
                    break;
                }
            }
            threadsmux.unlock(&token);
            delete thr;
        } else if (r == &socksub) {
            if (owner->shutdown.ready()) {
                /* We're shutting down, so go back to waiting without
                   accepting the new connection and without rearming
                   the subscription. */
                continue; }
            auto newfd(owner->sock.accept());
            socksub.rearm();
            if (newfd.isfailure())
                newfd.failure().fatal("accept on control interface");
            logmsg(loglevel::info,
                   "control interface accepting new client " +
                   fields::mk(newfd.success().peer()));
            auto token(threadsmux.lock());
            auto tr(rpcconnthread<cookie_t>::spawn(owner,
                                                   newfd.success(),
                                                   owner->shutdown));
            if (tr.isfailure()) {
                error::from_errno().warn(
                    "Cannot build thread for new client " +
                    fields::mk(newfd.success().peer()));
                newfd.success().close();
            } else {
                threads.pushhead(tr.success());
            }
            threadsmux.unlock(&token);
        } else {
            abort(); } }
    
    assert(threads.empty());
    assert(owner->shutdown.ready());
    assert(owner->dying.empty());
    return; }

template <typename cookie_t>
rpcserver<cookie_t>::rootthread::rootthread(
    rpcserver<cookie_t> *_owner)
    : threads(),
      threadsmux(),
      owner(_owner) {}

template <typename cookie_t>
rpcserver<cookie_t>::unknowniface::unknowniface()
    : rpcinterface<cookie_t>(wireproto::msgtag(0)) {}

template <typename cookie_t> maybe<error>
rpcserver<cookie_t>::unknowniface::message(
    const wireproto::rx_message &msg,
    cookie_t,
    buffer &) {
    logmsg(loglevel::failure,
           "Received an unrecognised message type " + fields::mk(msg.t));
    return error::unrecognisedmessage; }

template <typename cookie_t>
rpcserver<cookie_t>::~rpcserver() {
    assert(!roothandle);
    assert(unknownregistration->outstanding == 0);
    unknownregistration->destroy();
    assert(registrations.empty()); }

template <typename cookie_t> void
rpcserver<cookie_t>::deregister(rpcregistration<cookie_t> *what)
{
    auto token(mux.lock());
    for (auto it(registrations.start()); !it.finished(); it.next()) {
        if (*it == what) {
            it.remove();
            mux.unlock(&token);
            return; } }
    mux.unlock(&token);
    abort(); }

template <typename cookie_t>
rpcserver<cookie_t>::rpcserver()
    : mux(),
      registrations(),
      shutdown(),
      dying(),
      sock(),
      roothandle(NULL),
      root(this),
      unknowninterface(),
      unknownregistration(registeriface(unknowninterface)) {}

template <typename cookie_t> void
rpcserver<cookie_t>::killconn(rpcconn &conn) {
    auto token(root.threadsmux.lock());
    for (auto it(root.threads.start()); !it.finished(); it.next()) {
        if (&conn == &(*it)->conn) {
            (*it)->shutdownone.set(true);
            root.threadsmux.unlock(&token);
            return; } }
    root.threadsmux.unlock(&token);
    abort(); }

template <typename cookie_t> rpcregistration<cookie_t> *
rpcserver<cookie_t>::registeriface(
    rpcinterface<cookie_t> &ri) {
    return registeriface(multiregistration().add(ri)); }

template <typename cookie_t> typename rpcserver<cookie_t>::multiregistration &
rpcserver<cookie_t>::multiregistration::add(
    rpcinterface<cookie_t> &ri) {
    content.pushtail(&ri);
    return *this; }

template <typename cookie_t>
rpcserver<cookie_t>::multiregistration::~multiregistration() {
    content.flush(); }

template <typename cookie_t> rpcregistration<cookie_t> *
rpcserver<cookie_t>::registeriface(const multiregistration &mr) {
    auto res(new class rpcregistration<cookie_t>(this));
    auto token(mux.lock());
    for (auto it1(mr.content.start()); !it1.finished(); it1.next()) {
        for (auto it2(registrations.start()); !it2.finished(); it2.next()) {
            for (auto it3((*it2)->content.start());
                 !it3.finished();
                 it3.next()) {
                assert((*it3)->tag != (*it1)->tag); } }
        res->content.pushtail(*it1); }
    registrations.pushtail(res);
    mux.unlock(&token);
    return res;
}

template <typename cookie_t> maybe<error>
rpcserver<cookie_t>::start(const peername &p, const fields::field &name)
{
    assert(!roothandle);
    assert(unknownregistration);
    
    auto sl(socket_t::listen(p));
    if (sl.isfailure()) return sl.failure();
    
    maybe<error> threaderr(Nothing);
    sock = sl.success();
    
    threaderr = thread::spawn(
        &root, &roothandle, name);
    if (threaderr.isjust()) sock.close();
    return threaderr; }

template <typename cookie_t> peername
rpcserver<cookie_t>::localname() const {
    return sock.localname(); }

template <typename cookie_t> void
rpcserver<cookie_t>::stop() {
    if (roothandle == NULL) return;
    shutdown.set(true);
    roothandle->join();
    roothandle = NULL; }

template <typename cookie_t> void
rpcserver<cookie_t>::destroy() {
    stop();
    delete this; }

#define RPCSERVER(ctxt)                                                 \
    template class rpcserver<ctxt>;                                     \
    template class rpcconnthread<ctxt>;                                 \
    template class rpcregistration<ctxt>;                               \
    template class rpcinterface<ctxt>;                                  \
    template class list<rpcinterface<ctxt> *>;                          \
    template class list<rpcregistration<ctxt> *>;                       \
    template class list<rpcconnthread<ctxt> *>;           \
    template class waitqueue<rpcconnthread<ctxt> *>;

#endif /* !RPCSERVER_TMPL__ */
