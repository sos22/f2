diff --git a/buffer.C b/buffer.C
index 4f620ad..3c5cef2 100644
--- a/buffer.C
+++ b/buffer.C
@@ -3,6 +3,7 @@
 #include <string.h>
 
 #include "fd.H"
+#include "forcelinkage.H"
 #include "test.H"
 
 #include "list.tmpl"
@@ -258,9 +259,9 @@ buffer::linearise(size_t start, size_t end)
     return b->payload;
 }
 
-void
-buffer::test(class test &t)
-{
+namespace test {
+static struct _1 : public testcase {
+    void run(support &t) {
     for (int i = 0; i < 1000; i++) {
         t.msg("iteration %d/%d", i, 1000);
         auto b = new buffer();
@@ -359,5 +360,10 @@ buffer::test(class test &t)
         }
         free(content);
         delete b;
-    }
+    } }
+    _1(const char *a, const char *b) : testcase(a, b) {}
+} _1("buffer", "buffer test"); }
+
+namespace forcelinkage {
+void buffer() {}
 }
diff --git a/buffer.H b/buffer.H
index ab2e761..b222984 100644
--- a/buffer.H
+++ b/buffer.H
@@ -8,7 +8,6 @@
 #include "maybe.H"
 
 class fd_t;
-class test;
 
 class buffer {
     class subbuf {
@@ -97,7 +96,6 @@ public:
      * is in the same coordinate system as offset() */
     char idx(size_t i) const;
 
-    static void test(class test &);
 };
 
 #endif /* !BUFFER_H__ */
diff --git a/fields.C b/fields.C
index e0a5425..71b02b7 100644
--- a/fields.C
+++ b/fields.C
@@ -6,6 +6,7 @@
 #include <time.h>
 
 #include "list.H"
+#include "forcelinkage.H"
 #include "test.H"
 #include "thread.H"
 
@@ -536,10 +537,13 @@ void flush()
 }
 
 template const field &mk(const maybe<int> &);
-template const field &mk(const maybe<const char *> &);
+template const field &mk(const maybe<const char *> &); }
 
-void test(::test &)
-{
+namespace test {
+using namespace fields;
+
+static struct _1 : public testcase {
+    void run(support &) {
     flush();
 
     fieldbuf buf;
@@ -648,7 +652,10 @@ void test(::test &)
     buf.reset();
     mk(123456).sep(fields::mk("ABC"), 1).fmt(buf);
     assert(!strcmp(buf.c_str(), "1ABC2ABC3ABC4ABC5ABC6"));
-    flush();
-}
+    flush(); }
+    _1(const char *a, const char *b) : testcase(a, b) {}
+} _1("fields", "fields test"); }
 
-};
+namespace forcelinkage {
+void fields() {}
+}
diff --git a/fields.H b/fields.H
index 4822666..06875ed 100644
--- a/fields.H
+++ b/fields.H
@@ -8,8 +8,6 @@
 #include "maybe.H"
 #include "tid.H"
 
-class test;
-
 namespace fields {
 
 class fieldbuf {
@@ -112,8 +110,6 @@ const timefield &mk(const struct timeval &);
 void flush();
 void print(const field &f);
 
-void test(class ::test &);
-
 template <typename t> const field &mk(const ::maybe<t> &m);
 
 };
diff --git a/lib.mk.gen b/lib.mk.gen
index 02a3e3c..51a0edb 100755
--- a/lib.mk.gen
+++ b/lib.mk.gen
@@ -24,7 +24,6 @@ function bits() {
     _ obj
     _ peername
     _ proto
-    _ pubsub
     _ ratelimiter
     _ registrationsecret
     _ rpcconn
diff --git a/logging.C b/logging.C
index a3ea3f9..02a8650 100644
--- a/logging.C
+++ b/logging.C
@@ -14,9 +14,11 @@
 
 #include "error.H"
 #include "fields.H"
+#include "forcelinkage.H"
 #include "maybe.H"
 #include "mutex.H"
 #include "proto.H"
+#include "test.H"
 
 #include "list.tmpl"
 
@@ -399,8 +401,9 @@ fields::mk(const memlog_entry &e) {
     return "<memlog_entry:" + fields::mk(e.idx) +
         "=" + fields::mk(e.msg) + ">"; }
 
-void
-logtest(class test &) {
+namespace test {
+static struct _1 : public testcase {
+    void run(support &) {
     memlog_sink ms;
     ms.msg("Hello");
     ms.msg("World");
@@ -454,3 +457,9 @@ logtest(class test &) {
         l.flush(); }
     
     ms.flush(); }
+    _1(const char *a, const char *b) : testcase(a, b) {}
+} _1("logging", "logging test"); }
+
+namespace forcelinkage {
+void logging() {}
+}
diff --git a/logging.H b/logging.H
index 2ad1cc1..5b304e1 100644
--- a/logging.H
+++ b/logging.H
@@ -120,6 +120,4 @@ public:  getlogsiface();
 public:  static getlogsiface singleton;
 };
 
-void logtest(class test &);
-
 #endif /* !LOGGING_H__ */
diff --git a/test.C b/test.C
index a8daa77..959dc55 100644
--- a/test.C
+++ b/test.C
@@ -2,18 +2,41 @@
 
 #include <stdarg.h>
 #include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
 
+namespace test {
 void
-test::msg(const char *fmt, ...)
-{
+support::msg(const char *fmt, ...) {
     va_list args;
     va_start(args, fmt);
     vprintf(fmt, args);
     va_end(args);
-    printf("\n");
-}
+    printf("\n"); }
+
+void
+support::detail(const char *, ...) {}
+
+static testcase *headtest;
+
+testcase::testcase(const char *_name,
+                   const char *_description)
+    : name(_name),
+      description(_description),
+      next(headtest) {
+    headtest = this; }
+
+void
+runtest(support &sup, const char *name) {
+    for (auto it(headtest); it; it = it->next) {
+        if (!strcmp(it->name, name)) {
+            it->run(sup);
+            return; } }
+    abort(); }
 
 void
-test::detail(const char *, ...)
-{
+listtests() {
+    for (auto it(headtest); it; it = it->next) {
+        printf("%-30s %s\n", it->name, it->description); } }
+
 }
diff --git a/test.H b/test.H
index 74e6b07..6f53f02 100644
--- a/test.H
+++ b/test.H
@@ -2,10 +2,24 @@
 #define TEST_H__
 
 /* Various bits and bobs of use to the self test bits. */
-class test {
-public:
-    void msg(const char *fmt, ...) __attribute__((format(printf, 2, 3)));
-    void detail(const char *fmt, ...) __attribute__((format(printf, 2, 3)));
+namespace test {
+class support;
+void runtest(support &, const char *name);
+void listtests();
+
+class support {
+public: void msg(const char *, ...) __attribute__((format(printf,2,3)));
+public: void detail(const char *, ...) __attribute__((format(printf,2,3)));
 };
 
+class testcase {
+    friend void runtest(support &, const char *name);
+    friend void listtests();
+private: const char *const name;
+private: const char *const description;
+private: testcase *const next;
+public:  virtual void run(support &) = 0;
+public:  testcase(const char *name, const char *description); }; }
+
+
 #endif
diff --git a/testdriver.C b/testdriver.C
index 3fa47f1..d95caa5 100644
--- a/testdriver.C
+++ b/testdriver.C
@@ -3,25 +3,23 @@
 
 #include "buffer.H"
 #include "fields.H"
+#include "forcelinkage.H"
 #include "logging.H"
 #include "test.H"
 
 int
 main(int argc, char *argv[])
 {
-    test t;
-
+    forcelinkage::buffer();
+    forcelinkage::fields();
+    forcelinkage::logging();
+    forcelinkage::wireproto();
     if (argc != 2)
         errx(1, "need a single argument, the test to run");
-    if (!strcmp(argv[1], "buffer"))
-        buffer::test(t);
-    else if (!strcmp(argv[1], "fields"))
-        fields::test(t);
-    else if (!strcmp(argv[1], "logging"))
-        logtest(t);
-    else if (!strcmp(argv[1], "wireproto"))
-        wireproto::test(t);
-    else
-        errx(1, "unknown test %s", argv[1]);
+    if (!strcmp(argv[1], "list")) {
+        test::listtests();
+    } else {
+        test::support s;
+        test::runtest(s, argv[1]); }
     return 0;
 }
diff --git a/wireproto.C b/wireproto.C
index f6e32e5..34214a5 100644
--- a/wireproto.C
+++ b/wireproto.C
@@ -8,6 +8,8 @@
 #include "buffer.H"
 #include "error.H"
 #include "fields.H"
+#include "forcelinkage.H"
+#include "test.H"
 
 #include "fieldfinal.H"
 #include "list.tmpl"
@@ -618,120 +620,151 @@ template const field &mk<unsigned int>(
     const wireproto::parameter<unsigned int> &);
 };
 
-namespace wireproto {
-void
-test(class ::test &) {
-    buffer buf;
-    msgtag t(99);
-    parameter<int> p1(5, "p1");
-    parameter<const char *> p2(6, "p2");
-    {   auto r(tx_message(t).serialise(buf));
-        assert(r == Nothing); }
-    {   auto rxm(rx_message::fetch(buf));
-        assert(rxm.issuccess());
-        assert(rxm.success()->t == t);
-        rxm.success()->finish(); }
-    assert(buf.empty());
-    
-    {   auto r(tx_message(t)
-               .addparam(p1, 73)
-               .serialise(buf));
-        assert (r == Nothing); }
-    {   auto rxm(rx_message::fetch(buf));
-        assert(rxm.issuccess());
-        assert(rxm.success()->t == t);
-        assert(rxm.success()->getparam(p1) != Nothing);
-        assert(rxm.success()->getparam(p1).just() == 73);
-        rxm.success()->finish(); }
-    assert(buf.empty());
-    
-    {   auto r(tx_message(t)
-               .addparam(p1, 73)
-               .addparam(p2, "Hello world")
-               .serialise(buf));
-        assert (r == Nothing); }
-    {   auto rxm(rx_message::fetch(buf));
-        assert(rxm.issuccess());
-        assert(rxm.success()->t == t);
-        assert(rxm.success()->getparam(p1) != Nothing);
-        assert(rxm.success()->getparam(p1).just() == 73);
-        assert(rxm.success()->getparam(p2) != Nothing);
-        assert(!strcmp(rxm.success()->getparam(p2).just(),
-                       "Hello world"));
-        rxm.success()->finish(); }
-    assert(buf.empty());
-    
-    parameter<list<const char * > > p3(7, "p3");
-    {   list<const char *> l1;
-        l1.pushtail("X");
-        l1.pushtail("Y");
-        l1.pushtail("Z");
-        auto r(tx_message(t)
-               .addparam(p3, l1)
-               .serialise(buf));
-        l1.flush();
-        assert (r == Nothing); }
-    {   auto rxm(rx_message::fetch(buf));
-        assert(rxm.issuccess());
-        assert(rxm.success()->t == t);
-        assert(rxm.success()->getparam(p1) == Nothing);
-        assert(rxm.success()->getparam(p2) == Nothing);
-        list<const char *> l2;
-        auto fr(rxm.success()->fetch(p3, l2));
-        assert(fr == Nothing);
-        assert(l2.length() == 3);
-        auto it(l2.start());
-        assert(!strcmp(*it, "X"));
-        it.next();
-        assert(!strcmp(*it, "Y"));
-        it.next();
-        assert(!strcmp(*it, "Z"));
-        it.next();
-        assert(it.finished());
-        l2.flush();
-        rxm.success()->finish(); }
-    assert(buf.empty());
-    
-    parameter<tx_compoundparameter> p4t(8, "p4t");
-    parameter<rx_compoundparameter> p4r(8, "p4r");
-    {   auto r(tx_message(t)
-               .addparam(
-                   p4t,
-                   tx_compoundparameter())
-               .addparam(p1, 8)
-               .addparam(p2, "root")
-               .serialise(buf));
-        assert(r == Nothing); }
-    {   auto rxm(rx_message::fetch(buf));
-        assert(rxm.issuccess());
-        assert(rxm.success()->getparam(p1).just() == 8);
-        assert(!strcmp(rxm.success()->getparam(p2).just(), "root"));
-        auto nested(rxm.success()->getparam(p4r));
-        assert(nested != Nothing);
-        rxm.success()->finish(); }
-    assert(buf.empty());
-    
-    {   auto r(tx_message(t)
-               .addparam(
-                   p4t,
-                   tx_compoundparameter()
-                   .addparam(p1, 7)
-                   .addparam(p2, (const char *)"nested"))
-               .addparam(p1, 8)
-               .addparam(p2, "root")
-               .serialise(buf));
-        assert(r == Nothing); }
-    {   auto rxm(rx_message::fetch(buf));
-        assert(rxm.issuccess());
-        assert(rxm.success()->getparam(p1).just() == 8);
-        assert(!strcmp(rxm.success()->getparam(p2).just(), "root"));
-        auto nested(rxm.success()->getparam(p4r));
-        assert(nested != Nothing);
-        assert(nested.just().getparam(p1).just() == 7);
-        assert(!strcmp(nested.just().getparam(p2).just(), "nested"));
-        rxm.success()->finish(); }
-    assert(buf.empty()); }
+namespace test {
+using namespace wireproto;
+static struct _1 : public testcase {
+    void run(support &) {
+        buffer buf;
+        msgtag t(99);
+        {   auto r(tx_message(t).serialise(buf));
+            assert(r == Nothing); }
+        {   auto rxm(rx_message::fetch(buf));
+            assert(rxm.issuccess());
+            assert(rxm.success()->t == t);
+            rxm.success()->finish(); }
+        assert(buf.empty()); }
+    _1(const char *a, const char *b) : testcase(a, b) {}
+} _1("wireproto.emptymsg", "serialise and deserialise an empty message");
+static struct _2 : public testcase {
+    void run(support &) {
+        buffer buf;
+        msgtag t(99);
+        parameter<int> p1(5, "p1");
+        {   auto r(tx_message(t)
+                   .addparam(p1, 73)
+                   .serialise(buf));
+            assert (r == Nothing); }
+        {   auto rxm(rx_message::fetch(buf));
+            assert(rxm.issuccess());
+            assert(rxm.success()->t == t);
+            assert(rxm.success()->getparam(p1) != Nothing);
+            assert(rxm.success()->getparam(p1).just() == 73);
+            rxm.success()->finish(); }
+        assert(buf.empty()); }
+    _2(const char *a, const char *b) : testcase(a, b) {}
+} _2("wireproto.intparam", "simple integer parameter");
+static struct _3 : public testcase {
+    void run(support &) {
+        buffer buf;
+        msgtag t(99);
+        parameter<const char *> p2(6, "p2");
+        {   auto r(tx_message(t)
+                   .addparam(p2, "Hello world")
+                   .serialise(buf));
+            assert (r == Nothing); }
+        {   auto rxm(rx_message::fetch(buf));
+            assert(rxm.issuccess());
+            assert(rxm.success()->t == t);
+            assert(rxm.success()->getparam(p2) != Nothing);
+            assert(!strcmp(rxm.success()->getparam(p2).just(),
+                           "Hello world"));
+            rxm.success()->finish(); }
+        assert(buf.empty()); }
+    _3(const char *a, const char *b) : testcase(a, b) {}
+} _3("wireproto.strparam", "simple string parameter");
+static struct _4 : public testcase {
+    void run(support &) {
+        buffer buf;
+        msgtag t(99);
+        parameter<list<const char * > > p3(7, "p3");
+        {   list<const char *> l1;
+            l1.pushtail("X");
+            l1.pushtail("Y");
+            l1.pushtail("Z");
+            auto r(tx_message(t)
+                   .addparam(p3, l1)
+                   .serialise(buf));
+            l1.flush();
+            assert (r == Nothing); }
+        {   auto rxm(rx_message::fetch(buf));
+            assert(rxm.issuccess());
+            assert(rxm.success()->t == t);
+            list<const char *> l2;
+            auto fr(rxm.success()->fetch(p3, l2));
+            assert(fr == Nothing);
+            assert(l2.length() == 3);
+            auto it(l2.start());
+            assert(!strcmp(*it, "X"));
+            it.next();
+            assert(!strcmp(*it, "Y"));
+            it.next();
+            assert(!strcmp(*it, "Z"));
+            it.next();
+            assert(it.finished());
+            l2.flush();
+            rxm.success()->finish(); }
+        assert(buf.empty());
+    }
+    _4(const char *a, const char *b) : testcase(a, b) {}
+} _4("wireproto.strlist", "string list paremeter");
+struct _5 : public testcase {
+    void run(support &) {
+        buffer buf;
+        msgtag t(99);
+        parameter<int> p1(5, "p1");
+        parameter<const char *> p2(6, "p2");
+        parameter<tx_compoundparameter> p4t(8, "p4t");
+        parameter<rx_compoundparameter> p4r(8, "p4r");
+        {   auto r(tx_message(t)
+                   .addparam(
+                       p4t,
+                       tx_compoundparameter())
+                   .addparam(p1, 8)
+                   .addparam(p2, "root")
+                   .serialise(buf));
+            assert(r == Nothing); }
+        {   auto rxm(rx_message::fetch(buf));
+            assert(rxm.issuccess());
+            assert(rxm.success()->getparam(p1).just() == 8);
+            assert(!strcmp(rxm.success()->getparam(p2).just(), "root"));
+            auto nested(rxm.success()->getparam(p4r));
+            assert(nested != Nothing);
+            rxm.success()->finish(); }
+        assert(buf.empty()); }
+    _5(const char *a, const char *b) : testcase(a, b) {}
+} _5("wireproto.emptycompound", "empty compound parameter");
+static struct _6 : public testcase {
+    void run(support &) {
+        buffer buf;
+        msgtag t(99);
+        parameter<int> p1(5, "p1");
+        parameter<const char *> p2(6, "p2");
+        parameter<tx_compoundparameter> p4t(8, "p4t");
+        parameter<rx_compoundparameter> p4r(8, "p4r");
+        {   auto r(tx_message(t)
+                   .addparam(
+                       p4t,
+                       tx_compoundparameter()
+                       .addparam(p1, 7)
+                       .addparam(p2, (const char *)"nested"))
+                   .addparam(p1, 8)
+                   .addparam(p2, "root")
+                   .serialise(buf));
+            assert(r == Nothing); }
+        {   auto rxm(rx_message::fetch(buf));
+            assert(rxm.issuccess());
+            assert(rxm.success()->getparam(p1).just() == 8);
+            assert(!strcmp(rxm.success()->getparam(p2).just(), "root"));
+            auto nested(rxm.success()->getparam(p4r));
+            assert(nested != Nothing);
+            assert(nested.just().getparam(p1).just() == 7);
+            assert(!strcmp(nested.just().getparam(p2).just(), "nested"));
+            rxm.success()->finish(); }
+        assert(buf.empty()); }
+    _6(const char *a, const char *b) : testcase(a, b) {}
+} _6("wireproto.compound", "populated compound parameter"); }
 
+namespace wireproto {
 template maybe<error> rx_message::fetch(
     parameter<list<const char *> >,
     list<const char *> &) const;
@@ -741,3 +774,7 @@ template tx_message &tx_message::addparam(
 }
 
 template class list<const char *>;
+
+namespace forcelinkage {
+void wireproto() {}
+}
diff --git a/wireproto.H b/wireproto.H
index 252369b..30b8b29 100644
--- a/wireproto.H
+++ b/wireproto.H
@@ -10,7 +10,6 @@
 #include "orerror.H"
 
 class buffer;
-class test;
 
 namespace wireproto {
 class msgtag;
@@ -283,8 +282,6 @@ namespace wireproto {
        discard the message if this is present.  If present, this must
        be the only parameter. */
     extern const parameter<error> err_parameter;
-
-    void test(class ::test &);
 };
 
 #define WIREPROTO_TYPE(name)                                            \
