# A bunch of helpers for building makefiles

set -e

mkfile=$1
allsrcdeps="config config.H"

. config

cat <<EOF
$mkfile: $0 shutil config
clean::
	rm -f $mkfile
EOF

# Emit a link rule.  First argument is binary, other arguments are
# source objects.
function ld() {
    local target=$1
    shift
    local x=${@/%.o/-c.o}
    x=${x/%.a/-c.a}
    local y=${@/%.o/-t.o}
    y=${y/%.a/-t.a}
    local z=${@/%.o/-p.o}
    z=${z/%.a/-p.a}
    cat <<EOF
$target: $* $mkfile
	\$(F2_LD) $LDEXTRA -Wl,-E -o \$@.tmp $* -lstdc++ -ldl -lm -lrt -lpthread && mv -f \$@.tmp \$@
${target}-c: $x $mkfile
	\$(F2_LD) $LDEXTRA -Wl,-E --coverage -o \$@.tmp $x -lstdc++ -ldl -lm -lrt -lpthread && mv -f \$@.tmp \$@
${target}-t: $y $mkfile
	\$(F2_LD) $LDEXTRA -Wl,-E -o \$@.tmp $y -ldl -lstdc++ -lm -lrt -lpthread && mv -f \$@.tmp \$@
${target}-p: $z $mkfile
	\$(F2_LD) $LDEXTRA -Wl,-E -o \$@.tmp $z -pg -ldl -lstdc++ -lm -lrt -lpthread -lgcov && mv -f \$@.tmp \$@
clean::
	rm -f $target $target.tmp
	rm -f ${target}-c.tmp ${target}-c
	rm -f ${target}-t.tmp ${target}-t
	rm -f ${target}-p.tmp ${target}-p
EOF
}

# Emit compile rules.  First argument is source, others are added to
# compiler flags.  Language inferred from extension.
function cc() {
    local src=$1
    shift
    local extension=${src##*.}
    case $extension in
	C)
	    local obj=${src%.C}.o
	    local dep=${src%.C}.d
	    cat <<EOF
-include $dep
$obj: $src $allsrcdeps
	ccache \$(F2_CXX) $dashi -DTESTING=0 -DCOVERAGE=0 ${F2_CPPFLAGS} ${F2_CXXFLAGS} -DEXESUFFIX="" -c -MD -MT "$obj ${obj/.o/-c.o} ${obj/.o/-t.o} ${dep}" -MF ${dep}.tmp -o ${obj}.tmp \$< && mv ${dep}.tmp ${dep} && mv ${obj}.tmp ${obj}
${obj/.o/-t.o}: $src $allsrcdeps
	ccache \$(F2_CXX) $dashi -DTESTING=1 -DCOVERAGE=0 ${F2_CPPFLAGS} ${F2_CXXFLAGS} -DEXESUFFIX=\"-t\" -c -o ${obj}-t.tmp \$< && mv ${obj}-t.tmp \$@
${obj/.o/-c.o}: $src $allsrcdeps
	ccache \$(F2_CXX) $dashi -DTESTING=1 -DCOVERAGE=1 -fprofile-arcs --coverage -DEXESUFFIX=\"-c\" ${F2_CPPFLAGS} ${F2_CXXFLAGS} -c -o ${obj}-c.tmp \$< && mv ${obj}-c.tmp \$@
${obj/.o/-p.o}: $src $allsrcdeps
	ccache \$(F2_CXX) $dashi -DTESTING=1 -DCOVERAGE=1 -pg -fprofile-arcs ${F2_CPPFLAGS} ${F2_CXXFLAGS} -O3 -DEXESUFFIX=\"-p\" -c -o ${obj}-p.tmp \$< && mv ${obj}-p.tmp \$@
$dep: $src $allsrcdeps
	\$(F2_CXX) $dashi -DTESTING=1 -DCOVERAGE=1 -std=gnu++11 ${F2_CPPFLAGS} -M -MT "$obj ${obj/.o/-c.o} ${obj/.o/-t.o} ${obj/.o/-p.o} ${dep}" $src \$< > ${dep}.tmpZ && mv ${dep}.tmpZ ${dep}
clean::
	rm -f $dep $obj ${obj}.tmp ${dep}.tmp ${dep}.tmpZ
	rm -f ${obj/.o/-c.o} ${obj}-c.tmp
	rm -f ${obj/.o/-t.o} ${obj}-t.tmp
	rm -f ${obj/.o/-p.o} ${obj}-p.tmp
EOF
	    ;;
	c)
	    local obj=${src%.c}.o
	    local dep=${src%.c}.d
	    cat <<EOF
-include $dep
$obj: $src $allsrcdeps
	ccache \$(F2_CC) $dashi -DTESTING=0 -DCOVERAGE=0 ${F2_CPPFLAGS} ${F2_CFLAGS} -c -MD -MT "$obj ${obj/.o/-c.o} ${obj/.o/-t.o} ${dep}" -MF ${dep}.tmp -o ${obj}.tmp \$< && mv ${dep}.tmp ${dep} && mv ${obj}.tmp \$@
${obj/.o/-t.o}: $src $allsrcdeps
	ccache \$(F2_CC) $dashi -DTESTING=1 -DCOVERAGE=0 ${F2_CPPFLAGS} ${F2_CFLAGS} -c -o ${obj}-t.tmp \$< && mv ${obj}-t.tmp \$@
${obj/.o/-c.o}: $src $allsrcdeps
	ccache \$(F2_CC) $dashi -DTESTING=1 -DCOVERAGE=1 -fprofile-arcs -ftest-coverage ${F2_CPPFLAGS} ${F2_CFLAGS} -c -o ${obj}-c.tmp \$< && mv ${obj}-c.tmp \$@
${obj/.o/-p.o}: $src $allsrcdeps
	ccache \$(F2_CC) $dashi -DTESTING=1 -DCOVERAGE=1 -pg -fprofile-arcs ${F2_CPPFLAGS} ${F2_CFLAGS} -O3 -c -o ${obj}-p.tmp \$< && mv ${obj}-p.tmp \$@
$dep: $src $allsrcdeps
	\$(F2_CC) $dashi ${F2_CFLAGS} -M -MT "$obj ${obj/.o/-c.o} ${obj/.o/-t.o} ${obj/.o/-p.o} ${dep}" $src \$< > ${dep}.tmp && mv ${dep}.tmp ${dep}
clean::
	rm -f $dep $obj ${obj}.tmp
	rm -f ${obj/.o/-c.o} ${obj}-c.tmp
	rm -f ${obj/.o/-t.o} ${obj}-t.tmp
	rm -f ${obj/.o/-p.o} ${obj}-p.tmp
EOF
	    ;;
	*)
	    echo "Unknown language extension \`\`$extension'' (for $src)" >&2
	    exit 1
	    ;;
    esac
}

# Build an archive from a bunch of object files.
function ar() {
    local target=$1
    shift
    cat <<EOF
$target: $* $mkfile
	ar cqs \$@.tmp $* && mv \$@.tmp \$@
${target/%.a/-c.a}: ${@/%.o/-c.o} $mkfile
	ar cqs \$@.tmp ${@/%.o/-c.o} && mv \$@.tmp \$@
${target/%.a/-t.a}: ${@/%.o/-t.o} $mkfile
	ar cqs \$@.tmp ${@/%.o/-t.o} && mv \$@.tmp \$@
${target/%.a/-p.a}: ${@/%.o/-p.o} $mkfile
	ar cqs \$@.tmp ${@/%.o/-p.o} && mv \$@.tmp \$@
clean::
	rm -f $target ${target/%.a/-c.a} ${target/%.a/-t.a} ${target/%.a/-p.a}
EOF
}

function target()
{
    local dep=$2
    cat <<EOF
realall:: $1
covall:: ${1}-c
testall:: ${1}-t
profall:: ${1}-p
EOF
    if [ "Z$dep" != "Z" ]
    then
        cat <<EOF
${1}: ${dep}
${1}-c: ${dep}
${1}-t: ${dep}
${1}-p: ${dep}
EOF
    fi
}

function testmodule()
{
    local targ=$1
    shift
    stripnr=$(pwd | sed 's,[^/],,g' | wc -c)
    newprefix=$(pwd)/${targ}-cov.d
    reports=$(echo $@ | sed "s/\(\$\| \)/.gcov\1/g;s,\(^\| \),\1${newprefix}/,g" )
    cat <<EOF
${targ}-cov-report: test-c
	@rm -rf ${newprefix} && mkdir ${newprefix} && GCOV_PREFIX_STRIP=${stripnr} GCOV_PREFIX="${newprefix}" ./test-c ${targ} '*' && (cd ${newprefix} ; ln -s ../*.C ../*.c ../*.gcno ../*.H ../*.tmpl . ; \$(F2_GCOV) *.gcda) > /dev/null && cat ${reports} | fgrep -v ':/*EOF*/' | sed '/:#ifndef COVERAGESKIP\$\$/,/:#endif\$\$/s/#####/@@@@@/;s/#####\\(.*abort();\\)/@@@@@\\1/;/\.\.\./s/#####/@@@@@/'> \$@
.PHONY: ${targ}-cov
${targ}-cov: ${targ}-cov-report
	@if grep -q '#####' ${targ}-cov-report; then echo "${targ} FAILED"; false; else echo "${targ} passed"; true; fi
coverage:: ${targ}-cov
${targ}-result: test-t
	@if ./test-t ${targ} '*'; then echo pass > ${targ}-result; else echo fail > ${targ}-result; fi
${targ}-res: ${targ}-result
	@grep -q pass ${targ}-result
alltests:: ${targ}-res
clean::
	rm -rf ${targ}-cov.d
	rm -f ${targ}-cov-report
EOF
}

# Rules for compiling objects which are going to go turn into the .so
# files which the compute agent instantiates into jobs.
function ccdyn()
{
    local src=$1
    shift
    local extension=${src##*.}
    case $extension in
	C)
	    local obj=${src%.C}.po
	    local dep=${src%.C}.d
	    cat <<EOF
-include $dep
$obj: $src $allsrcdeps
	ccache \$(F2_CXX) $dashi ${F2_CPPFLAGS} ${F2_CXXFLAGS} -fPIC -c -MD -MT "$obj" -MF ${dep}.tmp -o ${obj}.tmp \$< && mv ${dep}.tmp ${dep} && mv ${obj}.tmp ${obj}
$dep: $src $allsrcdeps
	\$(F2_CXX) $dashi -std=gnu++11 ${F2_CPPFLAGS} -M -MT "$obj" $src \$< > ${dep}.tmpZ && mv ${dep}.tmpZ ${dep}
clean::
	rm -f $dep $obj ${obj}.tmp ${dep}.tmp ${dep}.tmpZ
EOF
	    ;;
	*)
	    echo "Unknown language extension \`\`$extension'' (for $src)" >&2
	    exit 1
	    ;;
    esac
}

# Build a bunch of modules generated by ccdyn into a .so suitable for
# the compute agent to load.
function lddyn()
{
    local target=$1
    shift
    cat <<EOF
$target: $* $mkfile
	\$(F2_LD) -shared -o \$@.tmp $* -lstdc++ -lm -lrt -lpthread && mv -f \$@.tmp \$@
clean::
	rm -f $target $target.tmp
EOF
}
