#ifndef RPCREGISTRATION_TMPL__
#define RPCREGISTRATION_TMPL__

#include "rpcregistration.H"

template <typename cookie_t>
rpcregistration<cookie_t>::rpcregistration(
    rpcservice<cookie_t> *_owner)
    : mux(),
      idle(mux),
      owner(_owner),
      content(),
      outstanding(0) {}

template <typename cookie_t> void
rpcregistration<cookie_t>::start()
{
    auto token(mux.lock());
    outstanding++;
    mux.unlock(&token);
}

template <typename cookie_t> void
rpcregistration<cookie_t>::finished() {
    auto token(mux.lock());
    assert(outstanding > 0);
    outstanding--;
    if (outstanding == 0) idle.broadcast(token);
    mux.unlock(&token); }

template <typename cookie_t> void
rpcregistration<cookie_t>::destroy() {
    /* Stop further invocations */
    owner->deregister(this);
    /* Wait for extant invocations to finish */
    auto token(mux.lock());
    while (outstanding != 0)
        token = idle.wait(&token);
    mux.unlock(&token);
    /* We're done. */
    content.flush();
    delete this; }

template <typename cookie_t>
rpcregistration<cookie_t>::~rpcregistration() {}

#endif /* !RPCREGISTRATION_TMPL__ */
