#ifndef PARSERS_TMPL__
#define PARSERS_TMPL__

#include "filename.H"
#include "pair.H"
#include "parsers.H"
#include "quickcheck.H"

#include "either.tmpl"
#include "fields.tmpl"
#include "orerror.tmpl"
#include "pair.tmpl"
#include "serialise.tmpl"

template <typename rval> template <typename ... args>
parser<rval>::result::result(const char *b, args &&... params)
    : res(std::forward<args>(params)...), left(b) {}

template <typename rval> template <typename o> typename parser<o>::result
parser<rval>::result::map(const std::function<o (const rval &)> &f) const {
    return typename parser<o>::result(left, f(res)); }

template <typename newtype, typename oldtype>
class _maperrparser : public parser<newtype> {
private: typedef typename parser<newtype>::result result;
private: const parser<oldtype> &underlying;
private: std::function<orerror<newtype> (const orerror<oldtype> &)> mapper;
private: orerror<result> parse(const char *what) const {
    orerror<result> res(error::unknown);
    auto r1(underlying.parse(what));
    if (r1.isfailure()) {
        auto r2(mapper(r1.failure()));
        if (r2.isfailure()) res = r2.failure();
        else res.mksuccess(what, r2.success()); }
    else {
        auto r2(mapper(r1.success().res));
        if (r2.isfailure()) res = r2.failure();
        else res.mksuccess(r1.success().left, r2.success()); }
    return res; }
public:  _maperrparser(const parser<oldtype> &_underlying,
                       const std::function<
                          orerror<newtype> (const orerror<oldtype> &)> &_mapper)
    : parser<newtype>(),
      underlying(_underlying),
      mapper(_mapper) {} };
template <typename oldtype>
template <typename newtype>
parser<newtype> const &
parser<oldtype>::_maperr(
    std::function<
        orerror<newtype> (const orerror<oldtype> &)> const &mapper) const {
    return *new _maperrparser<newtype, oldtype>(*this, mapper); }

template <typename r> orerror<r>
parser<r>::match(const string &what) const {
    typedef orerror<r> typ;
    auto r1(parse(what.c_str()));
    if (r1.isfailure()) return typ(Failure, r1.failure());
    else if (r1.success().left[0] != '\0') {
        return typ(Failure, error::noparse); }
    else {
        return typ(Success, r1.success().res); } }

template <typename a, typename b>
class concatparser : public parser<pair<a, b> > {
private: typedef typename parser<pair<a, b> >::result result;
private: const parser<a> &_a;
private: const parser<b> &_b;
private: orerror<result> parse(const char *what) const {
    auto r1(_a.parse(what));
    if (r1.isfailure()) return r1.failure();
    auto r2(_b.parse(r1.success().left));
    if (r2.isfailure()) return r2.failure();
    else return result(
        r2.success().left,
        pair<a, b>(r1.success().res, r2.success().res)); }
public:  concatparser(
    const parser<a> &__a,
    const parser<b> &__b)
    : _a(__a),
      _b(__b) {} };
template <typename rval>
template <typename other>
const parser<pair<rval, other> > &
parser<rval>::operator+(const parser<other> &o) const {
    return *new concatparser<rval,other>(*this, o); }

template <typename t> class parsethenmatch : public parser<t> {
private: typedef typename parser<t>::result result;
private: const parser<t> &_parse;
private: const parser<void> &_match;
public:  parsethenmatch(const parser<t> &__parse,
                        const parser<void> &__match)
    : _parse(__parse),
      _match(__match) {}
private: orerror<result> parse(const char *what) const {
    auto r1(_parse.parse(what));
    if (r1.isfailure()) return r1.failure();
    auto r2(_match.parse(r1.success().left));
    if (r2.isfailure()) return r2.failure();
    else return result(r2.success(), r1.success().res); } };
template <typename rval>
const parser<rval> &
parser<rval>::operator+(const parser<void> &o) const {
    return *new parsethenmatch<rval>(*this, o); }

template <typename a, typename b>
class alternateparser : public parser<either<a, b> > {
private: typedef typename parser<either<a, b> >::result result;
private: const parser<a> &_a;
private: const parser<b> &_b;
private: orerror<result> parse(
    const char *what) const {
    auto r1(_a.parse(what));
    if (r1.issuccess()) {
        return result(r1.success().left,
                      either<a, b>(Left(), r1.success().res)); }
    auto r2(_b.parse(what));
    if (r2.issuccess()) {
        return result(r2.success().left,
                      either<a, b>(Right(), r2.success().res)); }
    else return r2.failure(); }
public:  alternateparser(
    const parser<a> &__a,
    const parser<b> &__b)
    : _a(__a),
      _b(__b) {} };
template <typename rval>
template <typename other> const parser<either<rval, other> > &
parser<rval>::operator|(const parser<other> &o) const {
    return *new alternateparser<rval,other>(*this, o); }

template <typename t>
class optionparser : public parser<maybe<t> > {
public: const parser<t> &underlying;
public: optionparser(const parser<t> &_underlying)
    : underlying(_underlying) {}
public: orerror<typename optionparser<t>::result> parse(
    const char *what) const;
};
template <typename t> orerror<typename optionparser<t>::result>
optionparser<t>::parse(const char *what) const {
    auto r(underlying.parse(what));
    if (r.isfailure()) return typename optionparser<t>::result(what, Nothing);
    else return typename optionparser<t>::result(r.success().left,
                                                 r.success().res); }
template <typename t> const parser<maybe<t> > &
parser<t>::operator ~() const {
    return *new optionparser<t>(*this); }

template <typename t> class parseormatch : public parser<maybe<t> > {
private: const parser<t> &_parse;
private: const parser<void> &_match;
public:  parseormatch(const parser<t> &__parse,
                      const parser<void> &__match)
    : _parse(__parse),
      _match(__match) {}
private: orerror<typename parser<maybe<t> >::result> parse(
    const char *what) const {
    auto r1(_parse.parse(what));
    if (r1.issuccess()) {
        return typename parser<maybe<t> >::result(r1.success().left,
                                                  r1.success().res); }
    auto r2(_match.parse(what));
    if (r2.issuccess()) {
        return typename parser<maybe<t> >::result(r2.success(),
                                                  Nothing);
    } else {
        return r2.failure(); } } };
template <typename t>
const parser<maybe<t> > &
parser<t>::operator|(const parser<void> &what) const {
    return *new parseormatch<t>(*this, what); }

template <typename t>
class mapvoidparser : public parser<t> {
private: const parser<void> &underlying;
private: const std::function<t ()> what;
public:  mapvoidparser(const parser<void> &_underlying,
                       const std::function<t ()> &_what)
    : underlying(_underlying),
      what(_what) {}
private: orerror<typename parser<t>::result> parse(const char *str) const {
    auto r(underlying.parse(str));
    if (r.isfailure()) return r.failure();
    else return typename parser<t>::result(r.success(), what()); } };
template <typename t> const parser<t> &
parser<void>::map(const std::function<t ()> &what) const {
    return *new mapvoidparser<t>(*this, what); }

template <typename t> const parser<t> &
parser<void>::val(const t &what) const {
    return *this + nulparser<t>(what); }

template <typename t> class matchthenparse : public parser<t> {
private: const parser<void> &_match;
private: const parser<t> &_parse;
public:  matchthenparse(const parser<void> &__match,
                        const parser<t> &__parse)
    : _match(__match),
      _parse(__parse) {}
private: orerror<typename parser<t>::result> parse(
    const char *what) const {
    auto r1(_match.parse(what));
    if (r1.isfailure()) return r1.failure();
    else return _parse.parse(r1.success()); } };
template <typename t> const parser<t> &
parser<void>::operator+(const parser<t> &what) const {
    return *new matchthenparse<t>(*this, what); }

template <typename t> class matchorparse : public parser<maybe<t> > {
private: const parser<void> &_match;
private: const parser<t> &_parse;
public:  matchorparse(const parser<void> &__match,
                      const parser<t> &__parse)
    : _match(__match), _parse(__parse) {}
private: orerror<typename parser<maybe<t> >::result> parse(
    const char *what) const {
    auto r1(_match.parse(what));
    if (r1.issuccess()) {
        return typename parser<maybe<t> >::result(r1.success(), Nothing); }
    auto r2(_parse.parse(what));
    if (r2.isfailure()) {
        return r2.failure();
    } else {
        return typename parser<maybe<t> >::result(r2.success().left,
                                                  r2.success().res); } } };
template <typename t>
const parser<maybe<t> > &
parser<void>::operator|(const parser<t> &what) const {
    return *new matchorparse<t>(*this, what); }

template <typename t>
class nulparser_ : public parser<t> {
private: t val;
public:  nulparser_(const t &_val)
    : val(_val) {}
public:  orerror<typename parser<t>::result> parse(const char *)const;
};
template <typename t> orerror<typename parser<t>::result>
nulparser_<t>::parse(const char *what) const {
    return typename parser<t>::result(what, val); }
template <typename t> const parser<t> &
nulparser(const t &what) {
    return *new nulparser_<t>(what); }

template <typename t>
class strmatcher_ : public parser<t> {
private: const char *what;
private: const t val;
public:  strmatcher_(const char *_what, const t &_val)
    : what(_what), val(_val) {}
public:  orerror<typename parser<t>::result> parse(const char *) const;
};
template <typename t>
orerror<typename parser<t>::result>
strmatcher_<t>::parse(
    const char *buf) const {
    size_t l(strlen(what));
    if (strncmp(buf, what, l) == 0) {
        return typename parser<t>::result(buf + l, val);
    } else {
        return error::noparse; } }
template <typename t> const parser<t> &
strmatcher(const char *what, const t &val) {
    return *new strmatcher_<t>(what, val); }

template <typename r>
class errparser_ : public parser<r> {
private: error e;
public:  errparser_(error _e) : e(_e) {}
public:  orerror<typename parser<r>::result> parse(const char *) const; };
template <typename r> orerror<typename parser<r>::result>
errparser_<r>::parse(const char *) const {
    return e; };
template <typename t>
const parser<t> &
errparser(error e) {
    return *new errparser_<t>(e); }

template <typename t> const parser<t> &
operator+(
    const char *prefix, const parser<t> &w) {
    return strmatcher(prefix) + w; }
template <typename t> const parser<t> &
operator+(const parser<t> &w, const char *suffix) {
    return w + strmatcher(suffix); }

template <typename typ> const parser<typ> &
operator||(const parser<typ> &a, const parser<typ> &b) {
    class inner : public ::parser<typ> {
    public: typedef typename ::parser<typ>::result result;
    public: const parser<either<typ, typ> > &d;
    public: inner(const parser<either<typ, typ> > &_d) : d(_d) {}
    public: orerror<result> parse(const char *what) const {
        auto res(d.parse(what));
        if (res.isfailure()) return res.failure();
        else if (res.success().res.isleft()) {
            return result(res.success().left, res.success().res.left()); }
        else {
            return result(res.success().left, res.success().res.right()); } } };
    return *new inner(a | b); }

namespace parsers {
template <typename a> class _sepby final : public parser<list<a> > {
public: typedef typename parser<list<a> >::result result;
public: const parser<a> &elem;
public: const parser<void> &sep;
public: _sepby(const parser<a> &_elem, const parser<void> &_sep)
    : elem(_elem),
      sep(_sep) {}
public: orerror<result> parse(const char *const what) const final {
        auto cursor(what);
        orerror<result> res(Success, cursor, list<a>::mk());
        while (true) {
            auto inner(elem.parse(cursor));
            if (inner == error::noparse) break;
            if (inner.isfailure()) return inner.failure();
            cursor = inner.success().left;
            res.success().left = cursor;
            res.success().res.pushtail(inner.success().res);
            auto seper(sep.parse(cursor));
            if (seper == error::noparse) break;
            if (seper.isfailure()) return seper.failure();
            cursor = seper.success(); }
        return res; } };
template <typename a> const parser<list<a> > &
sepby(const parser<a> &what, const parser<void> &sep) {
    return *new _sepby<a>(what, sep); } }

template <typename t> void
parsers::roundtrip(const parser<t> &what, unsigned nr) {
    quickcheck q;
    for (unsigned x = 0; x < nr; x++) {
        auto val(mkrandom<t>(q));
        auto c(fields::mk(val).c_str());
        auto res(what.match(c).fatal("parse " + fields::mk(c)));
        assert(res == val); } }

template <typename t> const parser<t> &
parsers::defaultparser() { return t::parser(); }

#endif /* !PARSERS_TMPL__ */
