#ifndef WAITBOX_TMPL__
#define WAITBOX_TMPL__

#include "waitbox.H"

#include "maybe.tmpl"

template <typename t> bool
waitbox<t>::ready() const {
    auto token(mux.lock());
    auto res(content.isjust());
    mux.unlock(&token);
    return res; }

template <typename t> const t &
waitbox<t>::get(clientio io) const {
    subscriber sub;
    subscription s(sub, pub_);
    while (!ready()) sub.wait(io);
    return content.just(); }

template <typename t> maybe<t>
waitbox<t>::get(clientio io, timestamp deadline) const {
    subscriber sub;
    subscription s(sub, pub_);
    while (!ready()) {
        if (sub.wait(io, deadline) == NULL) return Nothing; }
    return content.just(); }

template <typename t> maybe<t>
waitbox<t>::poll() const {
    auto token(mux.lock());
    auto res(content);
    mux.unlock(&token);
    return res; }

template <typename t> void
waitbox<t>::set(const t &v) {
    assert(!ready());
    auto token(mux.lock());
    content = v;
    pub_.publish();
    mux.unlock(&token); }

template <typename t> void
waitbox<t>::setif(const t &v) {
    mux.locked([&] {
            if (content != Nothing) return;
            content = v;
            pub_.publish(); }); }

template <typename t> const fields::field &
waitbox<t>::field() const {
    auto token(mux.trylock());
    if (token == Nothing) return "<locked:" + mux.field() + ">";
    const fields::field &res(content.field());
    mux.unlock(&token.just());
    return res; }

#endif /* !WAITBOX_TMPL__ */
