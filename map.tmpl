#ifndef MAP_TMPL__
#define MAP_TMPL__

#include "fields.H"
#include "map.H"

namespace fields {
template <typename k, typename v> const field &mk(const map<k, v> &m) {
    return m.field(); } }

template <typename key, typename value, unsigned long hash(const key &)> bool
map<key, value, hash>::isprime(unsigned what) {
    return map<int, int, default_hashfn>::isprime(what); }

template <typename key, typename value, unsigned long hash(const key &)> void
map<key, value, hash>::rehash(unsigned nr) {
    reinterpret_cast<map<int, int, default_hashfn> *>(this)->rehash(nr); }

template <typename key, typename value, unsigned long hash(const key &)>unsigned
map<key, value, hash>::nextsize(unsigned nr) {
    return map<int, int, default_hashfn>::nextsize(nr); }

template <typename key, typename value, unsigned long hash(const key &)>unsigned
map<key, value, hash>::prevsize(unsigned nr) {
    return map<int, int, default_hashfn>::prevsize(nr); }

template <typename key, typename value, unsigned long hash(const key &)>
map<key, value, hash>::map(deserialise1 &ds)
    : nrbuckets(0),
      nritems(0),
      buckets(NULL) {
    /* Impose an arbitrary limit on the size of serialised hash
     * tables, for general sanity. */
    auto nr(ds.poprange<unsigned>(0,1000000));
    /* Pick a sensible size. */
    unsigned nb = 0;
    while (nb <= nr) nb = nextsize(nb);
    rehash(nb);
    /* Deserialise the entries. */
    for (unsigned x = 0; x < nr; x++) {
        auto e(new entry(key(ds), value(ds)));
        if (get(e->k) != Nothing) {
            if (!ds.random()) ds.fail(error::duplicate);
            delete e; }
        else {
            e->next = buckets[e->h % nrbuckets];
            buckets[e->h % nrbuckets] = e;
            nritems++; } } }

template <typename key, typename value, unsigned long hash(const key &)> void
map<key, value, hash>::serialise(serialise1 &s) const {
    s.push(nritems);
    for (unsigned x = 0; x < nrbuckets; x++) {
        for (auto e(buckets[x]); e != NULL; e = e->next) {
            s.push(e->k);
            s.push(e->v); } } }

template <typename key, typename value, unsigned long hash(const key &)>
map<key, value, hash>::map(const map &src)
    : nrbuckets(src.nrbuckets),
      nritems(0),
      buckets(new entry *[nrbuckets]) {
    for (unsigned x = 0; x < nrbuckets; x++) {
        auto p(&buckets[x]);
        for (auto b(src.buckets[x]); b != NULL; b = b->next) {
            *p = new entry(b->h, b->k, b->v);
            p = &(*p)->next;
            nritems++; }
        *p = NULL; }
    assert(nritems == src.nritems); }

template <typename key, typename value, unsigned long hash(const key &)>
map<key, value, hash>::~map() {
    for (unsigned x = 0; x < nrbuckets; x++) {
        while (buckets[x] != NULL) {
            auto n(buckets[x]->next);
            delete buckets[x];
            buckets[x] = n;
            nritems--; } }
    assert(nritems == 0);
    delete [] buckets; }

template <typename key, typename value, unsigned long hash(const key &)> void
map<key, value, hash>::set(const key &k, const value &v) {
    assert(get(k) == Nothing);
    if (nrbuckets == 0 || nritems > nrbuckets * 8) rehash(nextsize(nrbuckets));
    assert(nrbuckets != 0);
    auto b(new entry(k, v));
    b->next = buckets[b->h % nrbuckets];
    buckets[b->h % nrbuckets] = b;
    nritems++; }

template <typename key, typename value, unsigned long hash(const key &)>
maybe<value>
map<key, value, hash>::get(const key &k) const {
    if (nrbuckets == 0) return Nothing;
    auto h(hash(k));
    auto prev(&buckets[h % nrbuckets]);
    while (*prev) {
        auto b(*prev);
        if (b->h == h && b->k == k) return b->v;
        prev = &b->next; }
    return Nothing; }

template <typename key, typename value, unsigned long hash(const key &)>
value *
map<key, value, hash>::get_mutate(const key &k) {
    if (nrbuckets == 0) return NULL;
    auto h(hash(k));
    auto prev(&buckets[h % nrbuckets]);
    while (*prev) {
        auto b(*prev);
        if (b->h == h && b->k == k) return &b->v;
        prev = &b->next; }
    return NULL; }

template <typename key, typename value, unsigned long hash(const key &)> void
map<key, value, hash>::clear(const key &k) {
    auto h(hash(k));
    auto prev(&buckets[h % nrbuckets]);
    while (*prev) {
        auto b(*prev);
        if (b->h == h && b->k == k) {
            *prev = b->next;
            delete b;
            nritems--;
            if (nritems < nrbuckets / 8) rehash(prevsize(nrbuckets));
            return; }
        prev = &b->next; }
    abort(); }

template <typename key, typename value, unsigned long hash(const key &)> bool
map<key, value, hash>::operator==(const map &o) const {
    if (nritems != o.nritems) return false;
    for (unsigned x = 0; x < nrbuckets; x++) {
        for (auto b(buckets[x]); b != NULL; b = b->next) {
            auto y(o.nrbuckets == nrbuckets ? x : b->h % o.nrbuckets);
            auto c(o.buckets[y]);
            while (true) {
                if (c == NULL) return false;
                if (c->h == b->h && c->k == b->k) {
                    if (c->v == b->v) break;
                    else return false; }
                c = c->next; } } }
    return true; }

template <class _key, class _value, unsigned long hash(const _key &)>
class map<_key, _value, hash>::fieldimpl : public fields::field {
    friend class map;
private: const map &what;
private: explicit fieldimpl(const map &_what) : what(_what) {}
public:  void fmt(fields::fieldbuf &buf) const {
    buf.push("{");
    auto f(true);
    for (auto it(what.start()); !it.finished(); it.next()) {
        if (!f) buf.push(";");
        f = false;
        fields::mk(it.key()).escape().fmt(buf);
        buf.push("->");
        fields::mk(it.value()).escape().fmt(buf); }
    buf.push("}"); } };
template <class _key, class _value, unsigned long hash(const _key &)>
const typename map<_key, _value, hash>::fieldimpl &
map<_key, _value, hash>::field() const {
    return *new fieldimpl(*this); };


#endif /* !MAP_TMPL__ */
