#ifndef THREAD_TMPL__
#define THREAD_TMPL__

#include "thread.H"

#include <pthread.h>
#include <string.h>

#include "error.H"
#include "fields.H"

template <typename t>
pausedthread<t>::pausedthread(t *_inner)
    : inner_(_inner) {}

template <typename t> t *
pausedthread<t>::go() {
    auto res(inner_);
    thread *r(res);
    inner_ = NULL;
    r->go();
    return res; }

template <typename t> void
pausedthread<t>::destroy() {
    thread *i(inner_);
    assert(!i->started);
    inner_->join(clientio::CLIENTIO);
    inner_ = NULL; }

template <typename t, typename ... args> pausedthread<t> thread::spawn(
    const fields::field &name,
    args &...params) {
    auto res = new t(constoken(name), params...);
    /* Check it derives from thread. */
    thread *rr = res;
    (void)rr;
    return res; }

#endif /* !THREAD_TMPL__ */
