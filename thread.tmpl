#ifndef THREAD_TMPL__
#define THREAD_TMPL__

#include "thread.H"

#include <pthread.h>
#include <string.h>

#include "error.H"
#include "fields.H"

template <typename t>
pausedthread<t>::pausedthread(t *_inner)
    : inner_(_inner) {}

template <typename t> t *
pausedthread<t>::go() {
    auto res(inner_);
    thread *r(res);
    inner_ = NULL;
    r->go();
    return res; }

template <typename t> void
pausedthread<t>::destroy() {
    thread *i(inner_);
    assert(!i->started);
    inner_->join(clientio::CLIENTIO);
    inner_ = NULL; }

template <typename t, typename ... args> pausedthread<t>
thread::spawn(
    const fields::field &name,
    args &&...params) {
    std::function<constoken (const constoken &)> wrap(
        [] (const constoken &tt) { return tt; });
    const std::function<constoken (const constoken &)> &www(wrap);
    return _spawn<t, constoken, args...>(name,
                                         www,
                                         std::forward<args>(params)... ); }

template <typename t, typename tokenT, typename ... args> pausedthread<t>
thread::_spawn(
    const fields::field &name,
    const std::function<tokenT (const constoken &)> &wrapper,
    args &&...params) {
    auto res = new t(wrapper(constoken(name)), std::forward<args>(params)...);
    /* Check it derives from thread. */
    thread *rr = res;
    (void)rr;
    return res; }

template <typename t, typename ... args> t *
thread::start(
    const fields::field &name,
    args && ... params) {
    auto p(spawn<t, args...>(name, std::forward<args>(params)...));
    return p.go(); }

#endif /* !THREAD_TMPL__ */
