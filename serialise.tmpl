#ifndef SERIALISE_TMPL__
#define SERIALISE_TMPL__

#include "buffer.H"
#include "error.H"
#include "serialise.H"
#include "version.H"

template <typename t> t
deserialise1::poprange(t min, t max) {
    if (src.isright()) {
        return min + ((t)*src.right() % (max - min + 1)); }
    else {
        t res(*this);
        if (res < min || res > max) {
            fail(error::invalidmessage);
            res = min; }
        return res; } }

template <typename t,
          typename serialiser = serialise1,
          typename deserialiser = deserialise1> void
serialise(quickcheck &q, unsigned nr = 1000) {
    for (unsigned x = 0; x < nr; x++) {
        auto val(mkrandom<t>(q));
        buffer buf;
        {   serialiser s(buf);
            val.serialise(s); }
        {   deserialiser ds(buf);
            t res(ds);
            assert(ds.status().issuccess());
            assert(res == val);
            assert(buf.avail() == ds.offset()); } } }

template <typename t> t
mkrandom(quickcheck &q) {
    while (true) {
        deserialise1 ds(q);
        t res(ds);
        if (ds.status().issuccess()) return res; } }

#endif /* !SERIALISE_TMPL__ */
