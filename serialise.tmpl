#ifndef SERIALISE_TMPL__
#define SERIALISE_TMPL__

#include "error.H"
#include "version.H"

template <typename t> orerror<t>
deserialise(buffer &buf) {
    deserialise1 ds(buf);
    short vers(ds);
    if (vers == 1) {
        t res(ds);
        if (ds.status().isfailure()) return ds.status().failure();
        else return res; }
    else if (vers == -1) {
        deserialiseT dsT(buf);
        t res(dsT);
        if (dsT.status().isfailure()) return dsT.status().failure();
        else return res; }
    else return error::badversion; }

template <typename t> t
deserialise1::poprange(t min, t max) {
    if (src.isright()) {
        return min + ((t)*src.right() % (max - min + 1)); }
    else {
        t res(*this);
        if (res < min || res > max) {
            fail(error::invalidmessage);
            res = min; }
        return res; } }

template <typename t, typename serialiser = serialise1> void
serialise(quickcheck &q, unsigned nr = 1000) {
    deserialise1 ds(q);
    for (unsigned x = 0; x < nr; x++) {
        auto val(mkrandom<t>(q));
        buffer buf;
        serialiser s(buf);
        val.serialise(s);
        auto r(deserialise<t>(buf));
        assert(r.issuccess());
        assert(r == val);
        assert(buf.empty()); } }

template <typename t> t
mkrandom(quickcheck &q) {
    while (true) {
        deserialise1 ds(q);
        t res(ds);
        if (ds.status().issuccess()) return res; } }

#endif /* !SERIALISE_TMPL__ */
