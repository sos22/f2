#ifndef LIST_TMPL__
#define LIST_TMPL__

#include <stdlib.h>

#define containerof(_ptr, _type, _member)				\
    ((_type *)((unsigned long)(_ptr) - (unsigned long)&((_type *)0)->_member))

template <typename t> struct list<t>::member {
    nub linkage;
    t value;
    member(const t &v)
      : linkage(), value(v)
	{}
    member()
      : linkage(), value()
	{}
};

template <typename t>
list<t>::list()
    : root()
{
    root.next = root.prev = containerof(&root, member, linkage);
}

template <typename t>
list<t>::~list()
{
    assert(empty());
}

template <typename t> void
list<t>::flush()
{
    auto i(start());
    while (!i.finished())
	i.remove();
}

template <typename t> bool
list<t>::empty() const
{
    return &root.next->linkage == &root;
}

template <typename t> t
list<t>::pophead()
{
    assert(!empty());
    auto i(start());
    t res = *i;
    i.remove();
    return res;
}

template <typename t> t
list<t>::poptail()
{
    assert(!empty());
    auto i(reverse());
    t res = *i;
    i.remove();
    return res;
}

template <typename t> void
list<t>::pushhead(const t &what)
{
    auto m(new member(what));
    m->linkage.next = root.next;
    m->linkage.prev = containerof(&root, member, linkage);
    root.next->linkage.prev = m;
    root.next = m;
}

template <typename t> void
list<t>::pushtail(const t &what)
{
    auto m(new member(what));
    m->linkage.prev = root.prev;
    m->linkage.next = containerof(&root, member, linkage);
    root.prev->linkage.next = m;
    root.prev = m;
}

template <typename t> t &
list<t>::append()
{
    auto m(new member());
    m->linkage.prev = root.prev;
    m->linkage.next = containerof(&root, member, linkage);
    root.prev->linkage.next = m;
    root.prev = m;
    return m->value;
}

template <typename t> t &
list<t>::prepend()
{
    auto m(new member());
    m->linkage.next = root.next;
    m->linkage.prev = containerof(&root, member, linkage);
    root.next->linkage.prev = m;
    root.next = m;
    return m->value;
}

template <typename t> typename list<t>::iter
list<t>::start()
{
    return list<t>::iter(&root, false);
}

template <typename t> typename list<t>::iter
list<t>::reverse()
{
    return list<t>::iter(&root, true);
}

template <typename t> bool
list<t>::iter::finished() const
{
    return &cursor->linkage == eof;
}

template <typename t>
list<t>::iter::iter(nub *_eof,
		    bool _reverse)
    : cursor(_reverse
	     ? _eof->prev
	     : _eof->next),
      n(_reverse
	? cursor->linkage.prev
	: cursor->linkage.next),
      eof(_eof),
      reverse(_reverse)
{}

template <typename t> void
list<t>::iter::next()
{
    assert(!finished());
    cursor = n;
    if (reverse)
	n = cursor->linkage.prev;
    else
	n = cursor->linkage.next;
}

template <typename t> t &
list<t>::iter::operator*()
{
    assert(!finished());
    return cursor->value;
}

template <typename t> t *
list<t>::iter::operator->()
{
    assert(!finished());
    return &cursor->value;
}

template <typename t> const t &
list<t>::iter::operator*() const
{
    assert(!finished());
    return cursor->value;
}

template <typename t> const t *
list<t>::iter::operator->() const
{
    assert(!finished());
    return &cursor->value;
}

template <typename t> void
list<t>::iter::remove()
{
    assert(!finished());
    cursor->linkage.next->linkage.prev = cursor->linkage.prev;
    cursor->linkage.prev->linkage.next = cursor->linkage.next;
    delete cursor;
    next();
}

template <typename t> typename list<t>::const_iter
list<t>::start() const
{
    return list<t>::const_iter(&root, false);
}

template <typename t> bool
list<t>::const_iter::finished() const
{
    return &cursor->linkage == eof;
}

template <typename t>
list<t>::const_iter::const_iter(const nub *_eof,
				bool _reverse)
    : cursor(_reverse
	     ? _eof->prev
	     : _eof->next),
      eof(_eof),
      reverse(_reverse)
{}

template <typename t> void
list<t>::const_iter::next()
{
    assert(!finished());
    cursor = reverse
	? cursor->linkage.prev
	: cursor->linkage.next;
}

template <typename t> const t &
list<t>::const_iter::operator*() const
{
    assert(!finished());
    return cursor->value;
}

template <typename t> const t *
list<t>::const_iter::operator->() const
{
    assert(!finished());
    return &cursor->value;
}

template <typename t> int
list<t>::length() const
{
    int res;
    res = 0;
    for (auto it(start()); !it.finished(); it.next())
	res++;
    return res;
}

template <typename t> void
list<t>::sanitycheck() const
{
    const member *origin = containerof(&root, const member, linkage);
    const member *cursor1;
    const member *cursor2;

    cursor1 = origin;
    cursor2 = origin;
    while (1) {
	cursor1 = cursor1->linkage.next;
	assert(cursor1->linkage.next->linkage.prev == cursor1);
	assert(cursor1->linkage.prev->linkage.next == cursor1);
	if (cursor1 == origin)
	    break;
	assert(cursor1 != cursor2);
	cursor1 = cursor1->linkage.next;
	assert(cursor1->linkage.next->linkage.prev == cursor1);
	assert(cursor1->linkage.prev->linkage.next == cursor1);
	if (cursor1 == origin)
	    break;
	assert(cursor1 != cursor2);
	cursor2 = cursor2->linkage.next;
    }
}

#endif /* !LIST_TMPL__ */
