#ifndef EITHER_TMPL__
#define EITHER_TMPL__

#include "either.H"

template <typename a, typename b>
either<a,b>::either(const either &o)
    : isleft_(o.isleft_) {
    if (isleft()) new (content) a(o.left());
    else new (content) b(o.right()); }

template <typename a, typename b> either<a,b>
either<a,b>::left(const a &what) {
    either<a,b> res;
    res.isleft_ = true;
    new (res.content) a(what);
    return res; }

template <typename a, typename b>
either<a,b>::either(const b &what)
    : isleft_(false) {
    new (content) b(what); }

template <typename a, typename b> either<a,b>
either<a,b>::right(const b &what) {
    either<a,b> res;
    res.isleft_ = false;
    new (res.content) b(what);
    return res; }

template <typename a, typename b> bool
either<a,b>::isleft() const {
    return isleft_; }

template <typename a, typename b> bool
either<a,b>::isright() const {
    return !isleft_; }

template <typename a, typename b> const a &
either<a,b>::left() const {
    return *(a *)content; }

template <typename a, typename b> a &
either<a,b>::left() {
    return *(a *)content; }

template <typename a, typename b> const b &
either<a,b>::right() const {
    return *(b *)content; }

template <typename a, typename b> b &
either<a,b>::right() {
    return *(b *)content; }

template <typename a, typename b>
either<a,b>::~either() {
    if (isleft_) {
        left().~a();
    } else {
        right().~b(); } }

#endif /* !EITHER_TMPL__ */
