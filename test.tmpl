#ifndef TEST_TMPL__
#define TEST_TMPL__

#include "list.tmpl"

#if TESTING
template <typename t> void
tests::event<t>::trigger(t arg) {
    if (listeners.empty()) return;
    auto token(mux.lock());
    list<void *> l;
    for (auto it(listeners.start()); !it.finished(); it.next()) {
        auto i(static_cast<eventwaiter<t> *>(*it));
        l.pushtail(i);
        i->refcount++;
    }
    mux.unlock(&token);
    for (auto it(l.start()); !it.finished(); it.next()) {
        auto i(static_cast<eventwaiter<t> *>(*it));
        i->action(arg);
        mux.locked([i] (mutex_t::token) {
                i->refcount--;
                if ( i->refcount == 0 ) i->idle.publish(); }); } }

template <typename t>
tests::eventwaiter<t>::eventwaiter(event<t> &_evt,
                                   std::function<void (t)> _action)
    : evt(_evt),
      action(_action),
      refcount(0),
      idle() {
    auto token(evt.mux.lock());
    evt.listeners.pushtail(this);
    evt.mux.unlock(&token); }

template <typename t>
tests::eventwaiter<t>::~eventwaiter() {
    auto token(evt.mux.lock());
    bool found = false;
    for (auto it(evt.listeners.start()); !it.finished(); it.next()) {
        if (*it == this) {
            it.remove();
            found = true;
            break; } }
    assert(found);
    evt.mux.unlock(&token);
    /* Waiting for the action callbacks without a clientio token isn't
       really ideal.  On the other hand, the action callbacks are
       supposed to be short, and they don't have a clientio token
       either, so it's not completely unreasonable. */
    subscriber sub;
    subscription ss(sub, idle);
    mutex_t &mux(this->evt.mux);
    while (mux.locked<int>([this] { return refcount; }) != 0) {
        sub.wait(clientio::CLIENTIO); } }
#endif /* !TESTING */

template <typename rettype, typename ... args>
tests::hookpoint<rettype, args...>::hookpoint(
    const std::function<rettype (args &&...)> &_dflt)
    : mux(),
      hooked(Nothing),
      refcount(0),
      idle(mux),
      dflt(_dflt) {}

template <typename rettype, typename ... args> rettype
tests::hookpoint<rettype, args...>::slowpath(args &&... params) const {
    auto token(mux.lock());
    if (hooked == Nothing) {
        mux.unlock(&token);
        return dflt(std::forward<args>(params)...); }
    refcount++;
    mux.unlock(&token);
    auto res(hooked.just()->impl(std::forward<args>(params)...));
    token = mux.lock();
    refcount--;
    if (refcount == 0) idle.broadcast(token);
    mux.unlock(&token);
    return res; }

template <typename rettype, typename ... args>
tests::hookpoint<rettype, args...>::~hookpoint() {
    reinterpret_cast<hookpoint<void> *>(this)->wait(); }

template <typename rettype, typename ... args>
tests::hook<rettype, args...>::hook(
    hookpoint<rettype, args...> &_owner,
    const std::function<rettype (args&&...) > &_impl)
    : impl(_impl),
      owner(&_owner) {
    reinterpret_cast<hookpoint<void> *>(owner)->set(
        reinterpret_cast<hook<void> *>(this)); }

template <typename rettype, typename ... args>
tests::hook<rettype, args...>::~hook() {
    reinterpret_cast<hookpoint<void> *>(owner)->set(NULL); }

template <typename ... args>
tests::hookpoint<void, args...>::hookpoint(
    const std::function<void (args &&...)> &_dflt)
    : mux(),
      hooked(Nothing),
      refcount(0),
      idle(mux),
      dflt(_dflt) {}

template <typename ... args> void
tests::hookpoint<void, args...>::slowpath(args &&... params) const {
    auto token(mux.lock());
    if (hooked == Nothing) {
        mux.unlock(&token);
        return dflt(std::forward<args>(params)...); }
    refcount++;
    mux.unlock(&token);
    hooked.just()->impl(std::forward<args>(params)...);
    token = mux.lock();
    refcount--;
    if (refcount == 0) idle.broadcast(token);
    mux.unlock(&token); }

template <typename ... args>
tests::hookpoint<void, args...>::~hookpoint() {
    reinterpret_cast<hookpoint<void> *>(this)->wait(); }


#endif /* !TEST_TMPL__ */
