#ifndef RPCSERVICE_TMPL__
#define RPCSERVICE_TMPL__

#include "listenfd.H"
#include "rpcservice.H"

namespace wireproto {
template <typename> class parameter;
extern const parameter<error> err_parameter; }

template <typename t, typename ... args> orerror<t *>
rpcservice::listen(clientio io,
                   const rpcserviceconfig &config,
                   const peername &listenon,
                   args && ... params) {
    auto fd(rpcservice::open(listenon));
    if (fd.isfailure()) return fd.failure();
    auto res(new t(constoken(config),
                   std::forward<args>(params)...));
    auto r(res->_initialise(io, fd.success()));
    if (r.isfailure()) return r.failure();
    else return res; }

template <typename t, typename ... args> orerror<t *>
rpcservice::listen(clientio io,
                   const peername &listenon,
                   args && ... params) {
    return listen<t>(io,
                     rpcserviceconfig::dflt(),
                     listenon,
                     std::forward<args>(params)...); }

template <typename t> rpcservice::response &
rpcservice::response::addparam(wireproto::parameter<t> p, const t &v) {
    assert(wireproto::parameter<error>(p) != wireproto::err_parameter);
    inner.addparam(p, v);
    return *this; }

#endif /* !RPCSERVICE_TMPL__ */
