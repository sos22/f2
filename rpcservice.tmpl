#ifndef RPCSERVICE_TMPL__
#define RPCSERVICE_TMPL__

namespace wireproto {
template <typename> class parameter;
extern const parameter<error> err_parameter; }

template <typename t, typename ... args> orerror<t *>
rpcservice::listen(const peername &listenon,
                   const rpcserviceconfig &config,
                   args && ... params) {
    auto fd(rpcservice::open(listenon));
    if (fd.isfailure()) return fd.failure();
    auto res(new t(constoken(config),
                   std::forward<args>(params)...));
    res->startrootthread(fd.success());
    return res; }

template <typename t> rpcservice::response &
rpcservice::response::addparam(wireproto::parameter<t> p, const t &v) {
    assert(v != wireproto::err_parameter);
    inner.addparam(p, v);
    return *this; }

#endif /* !RPCSERVICE_TMPL__ */
