#ifndef TESTASSERT_TMPL__
#define TESTASSERT_TMPL__

namespace testassert {
template <typename inner>
expression<inner>::~expression() {}

template <typename inner>
val<inner>::~val() {}

template <typename inner>
val<inner>::val(const char *_label, const std::function<inner ()> &_calc)
    : label(_label),
      calc(_calc),
      value(Nothing) {}

template <typename inner> const fields::field &
val<inner>::field(unsigned, bool) const {
    return fields::mk(label) +
        "{" +
            *(value == Nothing
              ? static_cast<const fields::field *>(&fields::mk("..."))
              : static_cast<const fields::field *>(&fields::mk(value.just()))) +
        "}"; }

template <typename inner> inner
val<inner>::eval() {
    if (value == Nothing) value = calc();
    return value.just(); }

template <typename inner>
cnst<inner>::~cnst() {}

template <typename inner>
cnst<inner>::cnst(inner _value) : value(_value) {}

template <typename inner> const fields::field &
cnst<inner>::field(unsigned, bool) const { return fields::mk(value); }

template <typename inner> inner
cnst<inner>::eval() { return value; }

#define binop(name, op, prec, assoc)                                    \
    template <typename a, typename b> class expr##name                  \
        : public expression<decltype(*(a *)1ul op *(b *)2ul)> {         \
      public: typedef decltype(*(a *)1ul op *(b *)2ul) resT;            \
      public: expression<a> &_a;                                        \
      public: expression<b> &_b;                                        \
      public: expr##name(expression<a> &__a, expression<b> &__b)        \
            : _a(__a),                                                  \
              _b(__b) {}                                                \
      public: ~expr##name() {                                           \
            delete &_a;                                                 \
            delete &_b; }                                               \
      public: const fields::field &field(unsigned _prec, bool isleft) const { \
            bool needbrackets;                                          \
            if (_prec > prec) needbrackets = true;                      \
            else if (_prec < prec) needbrackets = false;                \
            else if (assoc == 0) needbrackets = true;                   \
            else if (assoc == -1) needbrackets = isleft;                \
            else needbrackets = !isleft;                                \
            auto &inner(_a.field(prec, true) + " "#op" " +              \
                        _b.field(prec, false));                         \
            if (needbrackets) return "(" + inner + ")";                 \
            else return inner; }                                        \
      public: resT eval() { return _a.eval() op _b.eval(); } };         \
    template <typename a, typename b> expression<decltype(*(a *)1ul op *(b *)2ul)> & \
    operator op(expression<a> &_a, expression<b> &_b) {                 \
        return *new expr##name<a, b>(_a, _b); }
binop(andand, &&, 1, 1)
binop(oror, ||, 1, 1)
binop(greater, >, 2, 0)
binop(greatereq, >=, 2, 0)
binop(equal, ==, 2, 0)
binop(lessereq, <=, 2, 0)
binop(lesser, <, 2, 0)
binop(plus, +, 3, 1)
binop(minus, -, 3, 1)
binop(times, *, 4, 1)
#undef binop
}

#endif /* !TESTASSERT_TMPL__ */
