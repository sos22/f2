#ifndef TESTASSERT_TMPL__
#define TESTASSERT_TMPL__

namespace testassert {
template <typename inner>
expression<inner>::~expression() {}

template <typename inner>
val<inner>::val(const char *_label, const std::function<inner ()> &_calc)
    : label(_label),
      calc(_calc),
      value(Nothing) {}

template <typename inner> const fields::field &
val<inner>::field() const {
    return fields::mk(label) +
        "{" +
            *(value == Nothing
              ? static_cast<const fields::field *>(&fields::mk("..."))
              : static_cast<const fields::field *>(&fields::mk(value.just()))) +
        "}"; }

template <typename inner> inner
val<inner>::eval() {
    if (value == Nothing) value = calc();
    return value.just(); }

template <typename inner>
cnst<inner>::cnst(inner _value) : value(_value) {}

template <typename inner> const fields::field &
cnst<inner>::field() const { return fields::mk(value); }

template <typename inner> inner
cnst<inner>::eval() { return value; }

#define binop(name, op)                                                 \
    template <typename a, typename b> class expr##name                  \
        : public expression<decltype(*(a *)1ul op *(b *)2ul)> {         \
      public: typedef decltype(*(a *)1ul op *(b *)2ul) resT;            \
      public: expression<a> &_a;                                        \
      public: expression<b> &_b;                                        \
      public: expr##name(expression<a> &__a, expression<b> &__b)        \
            : _a(__a),                                                  \
              _b(__b) {}                                                \
      public: ~expr##name() {                                           \
            delete &_a;                                                 \
            delete &_b; }                                               \
      public: const fields::field &field() const {                      \
            return "(" + _a.field() + " "#op" " + _b.field() + ")"; }   \
      public: resT eval() { return _a.eval() op _b.eval(); } };         \
    template <typename a, typename b> expression<decltype(*(a *)1ul op *(b *)2ul)> & \
    operator op(expression<a> &_a, expression<b> &_b) {                 \
        return *new expr##name<a, b>(_a, _b); }
binop(plus, +)
binop(minus, -)
binop(andand, &&)
binop(oror, ||)
binop(greater, >)
binop(greatereq, >=)
binop(equal, ==)
binop(lessereq, <=)
binop(lesser, <)
#undef binop
}

#endif /* !TESTASSERT_TMPL__ */
